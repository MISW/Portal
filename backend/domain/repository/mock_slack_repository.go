// Code generated by MockGen. DO NOT EDIT.
// Source: slack_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSlackRepository is a mock of SlackRepository interface
type MockSlackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSlackRepositoryMockRecorder
}

// MockSlackRepositoryMockRecorder is the mock recorder for MockSlackRepository
type MockSlackRepositoryMockRecorder struct {
	mock *MockSlackRepository
}

// NewMockSlackRepository creates a new mock instance
func NewMockSlackRepository(ctrl *gomock.Controller) *MockSlackRepository {
	mock := &MockSlackRepository{ctrl: ctrl}
	mock.recorder = &MockSlackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSlackRepository) EXPECT() *MockSlackRepositoryMockRecorder {
	return m.recorder
}

// UpdateSlackID mocks base method
func (m *MockSlackRepository) UpdateSlackID(ctx context.Context, id int, slackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlackID", ctx, id, slackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSlackID indicates an expected call of UpdateSlackID
func (mr *MockSlackRepositoryMockRecorder) UpdateSlackID(ctx, id, slackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlackID", reflect.TypeOf((*MockSlackRepository)(nil).UpdateSlackID), ctx, id, slackID)
}

// MarkUninvitedMembersAsPending mocks base method
func (m *MockSlackRepository) MarkUninvitedMembersAsPending(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkUninvitedMembersAsPending", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkUninvitedMembersAsPending indicates an expected call of MarkUninvitedMembersAsPending
func (mr *MockSlackRepositoryMockRecorder) MarkUninvitedMembersAsPending(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUninvitedMembersAsPending", reflect.TypeOf((*MockSlackRepository)(nil).MarkUninvitedMembersAsPending), ctx)
}
